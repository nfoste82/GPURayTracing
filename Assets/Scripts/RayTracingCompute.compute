// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

Texture2D<float4> _CheckerboardTexture;
SamplerState sampler_CheckerboardTexture;

float4 _AmbientLight;
float4 _SkyboxLight;

int _NumberOfPasses;
int _ShadowQuality;
int _NumBounces;
float _ShadowRandomness;
float _FocalDistance;

float _ShiftAmount;

float _Seed;
float2 _Pixel;

int _NumSpheres;
int _NumLights;

static const float PI = 3.141593f;
static const float MaxRefractionDiff = 4;
static const float MaxReflect = 2;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float3 Combine(float3 a, float3 b)
{
    return float3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}

// =======================================================
// Sphere
struct Sphere
{
    float3 position;
    float3 color;
    float3 emission;
    float radius;
    float smoothness;
    float opacity;
    float refraction;
};

StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Sphere> _Lights;

// =======================================================
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    float3 color;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.color = float3(0.0f, 0.0f, 0.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}
// =======================================================

// =======================================================
// RayHit
struct RayHit
{
    float3 position;
    float3 obj_position;
    float3 normal;
    float3 emission;
    float3 color;
    float obj_radius;
    float distance;
    float smoothness;
    float opacity;
    float refraction;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.obj_position = float3(0.0f, 0.0f, 0.0f);
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    hit.color = float3(0.0f, 0.0f, 0.0f);
    hit.obj_radius = 0.0f;
    hit.distance = 1.#INF;
    hit.smoothness = 0.0f;
    hit.opacity = 1.0f;
    hit.refraction = 1.0f;
    return hit;
}
// =======================================================

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.color = float3(0.8f, 0.8f, 0.8f);
        bestHit.smoothness = 0.2f;
        bestHit.emission = float3(0.0f, 0.0f, 0.0f);
        bestHit.obj_position = float3(0.0f, 0.0f, 0.0f);
        bestHit.obj_radius = 0.0f;
        bestHit.smoothness = 1.0f;
        bestHit.opacity = 1.0f;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = sphere.position - ray.origin;
    float p1 = dot(ray.direction, d);
    
    // Ray is pointing away from sphere
    if (p1 < 0)
    {
        return;
    }
    
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    
    // Ray missed the sphere
    if (p2sqr < 0)
    {
        return;
    }
    
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.obj_position = sphere.position;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.emission = sphere.emission;
        bestHit.color = sphere.color;
        bestHit.obj_radius = sphere.radius;
        bestHit.distance = t;
        bestHit.smoothness = sphere.smoothness;
        bestHit.opacity = sphere.opacity;
        bestHit.refraction = sphere.refraction;
    }
}


RayHit GetNearestIntersection(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	
	IntersectGroundPlane(ray, bestHit);
	
	int i;
	for (i = 0; i < _NumSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}
	
	for (i = 0; i < _NumLights; i++)
	{
		IntersectSphere(ray, bestHit, _Lights[i]);
	}
	
	return bestHit;
}

float3 GetLightHittingPointHardShadow(Ray ray, RayHit hit)
{
    float3 combinedLightColor = float3(0.0f, 0.0f, 0.0f);

    int i;
	for (i = 0; i < _NumLights; i++)
	{
		float3 ptToLight = _Lights[i].position - hit.position;
		float distanceToLight = length(ptToLight);
		ptToLight.x += rand() * _ShadowRandomness * 0.5f - rand() * _ShadowRandomness * 0.5f;
		ptToLight.y += rand() * _ShadowRandomness * 0.5f - rand() * _ShadowRandomness * 0.5f;
		ptToLight = normalize(ptToLight);
		
		Ray rayToLight = CreateRay(hit.position + (ptToLight * 0.01f), ptToLight);
		RayHit bestHit = CreateRayHit();
		
		bool lightHitsPoint = true;
		int j;
		for (j = 0; j < _NumSpheres; j++)
	    {	       
		    IntersectSphere(rayToLight, bestHit, _Spheres[j]);		    
	    }
	    
	    if (bestHit.distance > distanceToLight)
	    {
	        float3 lightColor = _Lights[i].emission;
	    
	        float rayNormalDot = dot(ptToLight, hit.normal);
	        float lightPercentageThatHits = rayNormalDot;
	        
	        combinedLightColor = Combine(combinedLightColor, lightColor * lightPercentageThatHits);
	    }
	}
	
	return combinedLightColor;
}

float3 GetLightHittingPoint(Ray ray, RayHit hit)
{
    float3 combinedLightColor = float3(0.0f, 0.0f, 0.0f);

    int i;
	for (i = 0; i < _NumLights; i++)
	{
        float4 transparentColor = float4(0.0f, 0.0f, 0.0f, 0.0f);	
	
	    float3 lightTotal = float3(0.0f, 0.0f, 0.0f);
	    float3 lightPos = _Lights[i].position;
		float3 ptToLight = lightPos - hit.position;
		float distanceToLight = length(ptToLight);
		ptToLight = normalize(ptToLight);
		
		float3 sideDir = cross(float3(0.0f, 1.0f, 0.0f), ptToLight) * _Lights[i].radius;
		float3 upDir = cross(sideDir, ptToLight) * _Lights[i].radius;
		
		int x;
		int y;
		for (x = -_ShadowQuality; x <= _ShadowQuality; x++)
		{
		    for (y = -_ShadowQuality; y <= _ShadowQuality; y++)
		    {
		        RayHit bestHit = CreateRayHit();
		    
		        float offsetAmount = (1.0f / max(1, _ShadowQuality)); 
		        
                float3 sideOffset = sideDir * x * offsetAmount + rand() * _ShadowRandomness - rand() * _ShadowRandomness;
                float3 upOffset = upDir * y * offsetAmount + rand() * _ShadowRandomness - rand() * _ShadowRandomness;
                float3 offsetPt = lightPos + sideOffset + upOffset;
                float3 ptToOffset = offsetPt - hit.position;
                float distanceToLight = length(ptToOffset);
                ptToOffset = normalize(ptToOffset);
                Ray rayToLight = CreateRay(hit.position + (hit.normal * 0.001f), ptToOffset);  
                
                int j;
                for (j = 0; j < _NumSpheres; j++)
                {	       
                    IntersectSphere(rayToLight, bestHit, _Spheres[j]);	    
                }
                
                float3 lightColor = _Lights[i].emission;
                float lightStrength = clamp(1.0f / (log2(max(1.0f, distanceToLight)) * 0.5f), 0, 1);                
                float rayNormalDot = dot(ptToOffset, hit.normal);
                float lightPercentageThatHits = rayNormalDot * lightStrength;
                
                if (bestHit.distance > distanceToLight)
                {    
                    lightTotal += lightColor * lightPercentageThatHits;
                }
                else if (bestHit.opacity < 1.0f)
                {
                    transparentColor.xyz += (lightColor * lightPercentageThatHits) * bestHit.color * (1 - bestHit.opacity);
                    transparentColor.w += (1 - bestHit.opacity);
                }
		    }
		}
		
		uint numLightSamples = pow((_ShadowQuality + _ShadowQuality + 1), 2);
		float inverseNumLightSamples = min(1.0f, (1.0f / numLightSamples)); 
		combinedLightColor = Combine(combinedLightColor, lightTotal * inverseNumLightSamples);
		
		if (transparentColor.w > 0.0f)
		{
		    combinedLightColor = Combine(combinedLightColor, transparentColor.xyz * inverseNumLightSamples);
        }
    }
	
	return combinedLightColor;
}

float3 GetSkyboxColor(float3 direction)
{
    float theta = acos(direction.y) / -PI;
    float phi = atan2(direction.x, -direction.z) / -PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}

float3 GetClosestPointOnLineSegment(float3 linePointStart, float3 linePointEnd, float3 testPoint)
{
    float3 lineDiff = linePointEnd - linePointStart;
    float lineSegSqrLength = dot(lineDiff, lineDiff);
 
    float3 lineToPoint = testPoint - linePointStart;
    float dotProduct = dot(lineDiff, lineToPoint);

    float percentageAlongLine = dotProduct / lineSegSqrLength;

    if (percentageAlongLine < 0.0f || percentageAlongLine > 1.0f)
    {
        // Point isn't within the line segment
        return float3(0.0f, 0.0f, 0.0f);
    }

    return linePointStart + (percentageAlongLine * (linePointEnd - linePointStart));
}

float3 Refract(float3 sourceDirection, float sourceRefraction, float targetRefraction, float3 targetNormal)
{
    float refraction = (targetRefraction - sourceRefraction) / MaxRefractionDiff;
    float reflectAmount = refraction * MaxReflect;

    // reflect amount
    // ------------------
    // 0 no refraction
    // -2 (-90 degrees)
    // 2 (90 degrees)
    
    reflectAmount = reflectAmount * dot(targetNormal, sourceDirection);
    return normalize((reflectAmount * targetNormal) + sourceDirection);
}

float3 GetTextureColorOnSphere(float3 position, float3 center, float radius)
{
    float3 localPos = position - center;
    
    float v = acos(localPos.z / radius) / PI;
    float u = acos(localPos.x / (radius * sin(PI * v))) / 2.0f * radius;
    
    return _CheckerboardTexture.SampleLevel(sampler_CheckerboardTexture, float2(u, v), 0).xyz;
}

float3 ModifyNormalByBumpColor(float3 normal, float3 bumpColor, float bumpiness)
{
    return (normal + bumpColor * bumpiness) * (1 - bumpiness * 0.5f);
}

float3 GetRandomizedNormalBasedOnAmount(float3 normal, float amount)
{
    float3 normalWithRand = normalize( float3(
                normal.x + rand() * (1 - amount) - rand() * (1 - amount), 
                normal.y + rand() * (1 - amount) - rand() * (1 - amount), 
                normal.z + rand() * (1 - amount) - rand() * (1 - amount)));
    return normalWithRand;
}

float3 GetColorAtHitThreeBounces(Ray ray, RayHit hit)
{
    // Shaders don't support recursion, so we'll do manual passes for each bounce we want to support
    // This function will be terrible for performance for a GPU, but even so the framerate should be decent (unless other settings are cranked up).
    
    if (hit.distance >= 1.#INF)
    {
        return GetSkyboxColor(ray.direction) * _SkyboxLight.xyz;
    }
    
    if ((hit.emission.x + hit.emission.y + hit.emission.z) > 0.0f)
    {
        return hit.emission;
    }
    
    // Randomize the hit normal somewhat based on roughness of the surface
    hit.normal = GetRandomizedNormalBasedOnAmount(hit.normal, hit.smoothness);
    
    ray.color = GetLightHittingPoint(ray, hit) * hit.opacity;
    
    // Second bounce
    Ray secondRay = CreateRay(hit.position + (hit.normal * 0.001f), reflect(ray.direction, hit.normal));    
    // In a ray tracer that allowed recursion we would split the ray off here into two rays that would
    // both contribute to the same pixel on the screen. Unfortunately a realistic solution to that requires 
    // recursion (tree of ray results), and compute shaders don't support recursion. Without that
    // we're stuck with transparency that doesn't look just right. A transparent object behind another will
    // look too opaque. Shadows from transparent objects don't look right when looking at them through
    // another transparent object.
    if (hit.opacity < 1.0f)
    {     
        // Get refraction direction after entering sphere
        secondRay.direction = Refract(ray.direction, 1.0f, hit.refraction, hit.normal);
        
        // Calculate exit point/normal for sphere
        float3 halfway = GetClosestPointOnLineSegment(secondRay.origin, secondRay.origin + (2.0f * hit.obj_radius * secondRay.direction), hit.obj_position);
        secondRay.origin += ((halfway - secondRay.origin) * 2.0f);
        float3 exitPointNormal = normalize(secondRay.origin - hit.obj_position);

        // Now refract again since we've left the sphere
        secondRay.direction = Refract(secondRay.direction, hit.refraction, 1.0f, exitPointNormal);        
    }
    RayHit secondHit = GetNearestIntersection(secondRay);       
    
    if (secondHit.distance >= 1.#INF)
    {
        return hit.color * Combine(ray.color, (GetSkyboxColor(secondRay.direction) * _SkyboxLight.xyz));
    }
    
    if ((secondHit.emission.x + secondHit.emission.y + secondHit.emission.z) > 0.0f)
    {
        return hit.color * Combine(ray.color, secondHit.emission);
    }   
      
    //if (secondHit.obj_radius > 0.0f)
    //{  
    //    float3 bumpColor = GetTextureColorOnSphere(secondHit.position, secondHit.obj_position, secondHit.obj_radius);
    //    secondHit.normal = ModifyNormalByBumpColor(secondHit.normal, bumpColor, (1 - secondHit.smoothness));
    //}     
    secondHit.normal = GetRandomizedNormalBasedOnAmount(secondHit.normal, secondHit.smoothness);
    
    secondRay.color = GetLightHittingPointHardShadow(secondRay, secondHit) * secondHit.opacity;
    
    // Third bounce        
    Ray thirdRay = CreateRay(secondHit.position + (secondHit.normal * 0.001f), reflect(secondRay.direction, secondHit.normal));
    if (secondHit.opacity < 1.0f)
    {    
        // Get refraction direction after entering sphere
        thirdRay.direction = Refract(secondRay.direction, 1.0f, secondHit.refraction, secondHit.normal);
        
        // Calculate exit point/normal for sphere
        float3 halfway = GetClosestPointOnLineSegment(thirdRay.origin, thirdRay.origin + (2.0f * secondHit.obj_radius * thirdRay.direction), secondHit.obj_position);
        thirdRay.origin = ((halfway - thirdRay.origin) * 2.0f) + thirdRay.origin;
        float3 exitPointNormal = normalize(thirdRay.origin - secondHit.obj_position);

        // Now refract again since we've left the sphere
        thirdRay.direction = Refract(thirdRay.direction, secondHit.refraction, 1.0f, exitPointNormal);        
    }
    RayHit thirdHit = GetNearestIntersection(thirdRay);       
    
    if (thirdHit.distance >= 1.#INF)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, (GetSkyboxColor(thirdRay.direction) * _SkyboxLight.xyz));
        return hit.color * Combine(ray.color, secondResult);
    }
    
    if ((thirdHit.emission.x + thirdHit.emission.y + thirdHit.emission.z) > 0.0f)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, thirdHit.emission);
        return hit.color * Combine(ray.color, secondResult);
    }
    
    //if (thirdHit.obj_radius > 0.0f)
    //{  
    //    float3 bumpColor = GetTextureColorOnSphere(thirdHit.position, thirdHit.obj_position, thirdHit.obj_radius);
    //    thirdHit.normal = ModifyNormalByBumpColor(thirdHit.normal, bumpColor, (1 - thirdHit.smoothness));
    //}
    thirdHit.normal = GetRandomizedNormalBasedOnAmount(thirdHit.normal, thirdHit.smoothness);
    
    thirdRay.color = GetLightHittingPointHardShadow(thirdRay, thirdHit) * thirdHit.opacity * GetSkyboxColor(thirdRay.direction) * _SkyboxLight.xyz;   
    
    return hit.color * Combine(ray.color, secondHit.color * Combine(secondRay.color, thirdHit.color * thirdRay.color));     
}

float3 GetColorAtHitFourBounces(Ray ray, RayHit hit)
{
    // Shaders don't support recursion, so we'll do manual passes for each bounce we want to support
    // This function will be terrible for performance for a GPU, but even so the framerate should be decent (unless other settings are cranked up).
    
    if (hit.distance >= 1.#INF)
    {
        return GetSkyboxColor(ray.direction) * _SkyboxLight.xyz;
    }
    
    if ((hit.emission.x + hit.emission.y + hit.emission.z) > 0.0f)
    {
        return hit.emission;
    }
    
    if (hit.obj_radius > 0.0f)
    {  
        float3 bumpColor = GetTextureColorOnSphere(hit.position, hit.obj_position, hit.obj_radius);
        hit.normal = ModifyNormalByBumpColor(hit.normal, bumpColor, (1 - hit.smoothness));
    }
    
    // Randomize the hit normal somewhat based on roughness of the surface
    hit.normal = GetRandomizedNormalBasedOnAmount(hit.normal, hit.smoothness);
    
    ray.color = GetLightHittingPoint(ray, hit) * hit.opacity;
    
    // Second bounce
    Ray secondRay = CreateRay(hit.position + (hit.normal * 0.001f), reflect(ray.direction, hit.normal));
    // In a ray tracer that allowed recursion we would split the ray off here into two rays that would
    // both contribute to the same pixel on the screen. Unfortunately a realistic solution to that requires 
    // recursion (tree of ray results), and compute shaders don't support recursion. Without that
    // we're stuck with transparency that doesn't look just right. A transparent object behind another will
    // look too opaque. Shadows from transparent objects don't look right when looking at them through
    // another transparent object.
    if (hit.opacity < 1.0f)
    {     
        // Get refraction direction after entering sphere
        secondRay.direction = Refract(ray.direction, 1.0f, hit.refraction, hit.normal);
        
        // Calculate exit point/normal for sphere
        float3 halfway = GetClosestPointOnLineSegment(secondRay.origin, secondRay.origin + (2.0f * hit.obj_radius * secondRay.direction), hit.obj_position);
        secondRay.origin += ((halfway - secondRay.origin) * 2.0f);
        float3 exitPointNormal = normalize(secondRay.origin - hit.obj_position);

        // Now refract again since we've left the sphere
        secondRay.direction = Refract(secondRay.direction, hit.refraction, 1.0f, exitPointNormal);        
    }
    RayHit secondHit = GetNearestIntersection(secondRay);       
    
    if (secondHit.distance >= 1.#INF)
    {
        return hit.color * Combine(ray.color, (GetSkyboxColor(secondRay.direction) * _SkyboxLight.xyz));
    }
    
    if ((secondHit.emission.x + secondHit.emission.y + secondHit.emission.z) > 0.0f)
    {
        return hit.color * Combine(ray.color, secondHit.emission);
    }   
      
    //if (secondHit.obj_radius > 0.0f)
    //{  
    //    float3 bumpColor = GetTextureColorOnSphere(secondHit.position, secondHit.obj_position, secondHit.obj_radius);
    //    secondHit.normal = ModifyNormalByBumpColor(secondHit.normal, bumpColor, (1 - secondHit.smoothness));
    //}     
    secondHit.normal = GetRandomizedNormalBasedOnAmount(secondHit.normal, secondHit.smoothness);
    
    secondRay.color = GetLightHittingPointHardShadow(secondRay, secondHit) * secondHit.opacity;
    
    // Third bounce        
    Ray thirdRay = CreateRay(secondHit.position + (secondHit.normal * 0.001f), reflect(secondRay.direction, secondHit.normal));
    if (secondHit.opacity < 1.0f)
    {    
        // Get refraction direction after entering sphere
        thirdRay.direction = Refract(secondRay.direction, 1.0f, secondHit.refraction, secondHit.normal);
        
        // Calculate exit point/normal for sphere
        float3 halfway = GetClosestPointOnLineSegment(thirdRay.origin, thirdRay.origin + (2.0f * secondHit.obj_radius * thirdRay.direction), secondHit.obj_position);
        thirdRay.origin = ((halfway - thirdRay.origin) * 2.0f) + thirdRay.origin;
        float3 exitPointNormal = normalize(thirdRay.origin - secondHit.obj_position);

        // Now refract again since we've left the sphere
        thirdRay.direction = Refract(thirdRay.direction, secondHit.refraction, 1.0f, exitPointNormal);        
    }
    RayHit thirdHit = GetNearestIntersection(thirdRay);       
    
    if (thirdHit.distance >= 1.#INF)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, (GetSkyboxColor(thirdRay.direction) * _SkyboxLight.xyz));
        return hit.color * Combine(ray.color, secondResult);
    }
    
    if ((thirdHit.emission.x + thirdHit.emission.y + thirdHit.emission.z) > 0.0f)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, thirdHit.emission);
        return hit.color * Combine(ray.color, secondResult);
    }
    
    //if (thirdHit.obj_radius > 0.0f)
    //{  
    //    float3 bumpColor = GetTextureColorOnSphere(thirdHit.position, thirdHit.obj_position, thirdHit.obj_radius);
    //    thirdHit.normal = ModifyNormalByBumpColor(thirdHit.normal, bumpColor, (1 - thirdHit.smoothness));
    //}
    thirdHit.normal = GetRandomizedNormalBasedOnAmount(thirdHit.normal, thirdHit.smoothness);
    
    thirdRay.color = GetLightHittingPointHardShadow(thirdRay, thirdHit) * thirdHit.opacity * GetSkyboxColor(thirdRay.direction) * _SkyboxLight.xyz;   
    
    Ray fourthRay = CreateRay(thirdHit.position + (thirdHit.normal * 0.001f), reflect(thirdRay.direction, thirdHit.normal));
    if (secondHit.opacity < 1.0f)
    {    
        // Get refraction direction after entering sphere
        fourthRay.direction = Refract(thirdRay.direction, 1.0f, thirdHit.refraction, thirdHit.normal);
        
        // Calculate exit point/normal for sphere
        float3 halfway = GetClosestPointOnLineSegment(fourthRay.origin, fourthRay.origin + (2.0f * thirdHit.obj_radius * fourthRay.direction), thirdHit.obj_position);
        fourthRay.origin = ((halfway - fourthRay.origin) * 2.0f) + fourthRay.origin;
        float3 exitPointNormal = normalize(fourthRay.origin - thirdHit.obj_position);

        // Now refract again since we've left the sphere
        fourthRay.direction = Refract(fourthRay.direction, thirdHit.refraction, 1.0f, exitPointNormal);        
    }
    RayHit fourthHit = GetNearestIntersection(fourthRay);
    
    float3 thirdResult = float3(0.0f, 0.0f, 0.0f);
    float3 secondResult = float3(0.0f, 0.0f, 0.0f);
    if (fourthHit.distance >= 1.#INF)
    {
        thirdResult = thirdHit.color * Combine(thirdRay.color, GetSkyboxColor(fourthRay.direction) * _SkyboxLight.xyz);        
    }    
    else if ((fourthHit.emission.x + fourthHit.emission.y + fourthHit.emission.z) > 0.0f)
    {
        thirdResult = thirdHit.color * Combine(thirdRay.color, fourthHit.emission);        
    }   
    else
    {
        thirdResult = thirdHit.color * Combine(thirdRay.color, fourthHit.color * fourthRay.color);
    }
    
    secondResult = secondHit.color * Combine(secondRay.color, thirdResult);
    return hit.color * Combine(ray.color, secondResult);         
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = (id.xy / float2(width, height) * 2.0f - 1.0f);
        
    Ray screenCenterRay = CreateCameraRay(float2(0.0f, 0.0f));
    float focalDistance = 1.0f;
    float3 focalPoint = screenCenterRay.origin + screenCenterRay.direction * focalDistance;
    
    float3 result = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < _NumberOfPasses; i++)
    {
        Ray ray = CreateCameraRay(uv);
        
        float3 focalPoint = ray.origin + ray.direction * _FocalDistance;
        
        float shiftAmount = 0.01;
        ray.origin.x += rand() * shiftAmount - rand() * shiftAmount;
        ray.origin.y += rand() * shiftAmount - rand() * shiftAmount;
        ray.origin.z += rand() * shiftAmount - rand() * shiftAmount;
        
        //ray.direction.x += rand() * 0.001f - rand() * 0.001f;
        //ray.direction.y += rand() * 0.001f - rand() * 0.001f;
        //ray.direction.z += rand() * 0.001f - rand() * 0.001f;
        //ray.direction = normalize(ray.direction);
        
        //ray.direction = normalize(ray.direction * 0.5f + normalize(focalPoint - ray.origin) * 0.5f);
        ray.direction = normalize(focalPoint - ray.origin); 
        
        RayHit hit = GetNearestIntersection(ray);        
        result += GetColorAtHitThreeBounces(ray, hit);
    }
   
    Result[id.xy] = float4(result / _NumberOfPasses, 1);
}
