// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float4 _AmbientLight;
float4 _SkyboxLight;

int _NumSpheres;
int _NumLights;

static const float PI = 3.141593f;

float3 Combine(float3 a, float3 b)
{
    return float3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}

// =======================================================
// Sphere
struct Sphere
{
    float3 position;
    float3 color;
    float3 emission;
    float radius;
    //float3 albedo;
    //float3 specular;
    float smoothness;
};

StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Sphere> _Lights;

// =======================================================
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    float3 color;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.color = float3(0.0f, 0.0f, 0.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}
// =======================================================

// =======================================================
// RayHit
struct RayHit
{
    float3 position;
    float3 normal;
    float3 emission;
    float3 color;
    float distance;
    //float3 albedo;
    //float3 specular;
    float smoothness;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    //hit.albedo = float3(0.0f, 0.0f, 0.0f);
    //hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}
// =======================================================

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    
    if (p2sqr < 0)
        return;
    
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        //bestHit.albedo = sphere.albedo;
        //bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
        bestHit.color = sphere.color;
    }
}


RayHit GetNearestIntersection(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	
	int i;
	for (i = 0; i < _NumSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}
	
	for (i = 0; i < _NumLights; i++)
	{
		IntersectSphere(ray, bestHit, _Lights[i]);
	}
	
	return bestHit;
}

float3 GetLightHittingPoint(Ray ray, RayHit hit)
{
    float3 combinedLightColor = float3(0.0f, 0.0f, 0.0f);

    int i;
	for (i = 0; i < _NumLights; i++)
	{
		float3 ptToLight = _Lights[i].position - hit.position;
		float distanceToLight = length(ptToLight);
		ptToLight = normalize(ptToLight);
		
		Ray rayToLight = CreateRay(hit.position + (ptToLight * 0.01f), ptToLight);
		RayHit bestHit = CreateRayHit();
		
		bool lightHitsPoint = true;
		int j;
		for (j = 0; j < _NumSpheres; j++)
	    {	       
		    IntersectSphere(rayToLight, bestHit, _Spheres[j]);		    
	    }
	    
	    if (bestHit.distance > distanceToLight)
	    {
	        float3 lightColor = _Lights[i].emission;
	    
	        float rayNormalDot = dot(ptToLight, hit.normal);
	        float lightPercentageThatHits = rayNormalDot;
	        
	        combinedLightColor = Combine(combinedLightColor, lightColor * lightPercentageThatHits);
	    }
	}
	
	return combinedLightColor;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    float3 result;
    float lastHitSmoothness = 1.0f;
    int numBounces = 0;
   
    
    while (true)
    {   
        numBounces += 1;
        
        if (hit.distance < 1.#INF && numBounces < 4)
        {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = reflect(ray.direction, hit.normal);
            //ray.energy *= hit.smoothness;
            
            // TODO: hit.color needs to factor in light sources
            float3 colorAtPt = GetLightHittingPoint(ray, hit);
            ray.color = Combine(ray.color, colorAtPt * hit.color * ray.energy);
            //ray.color = Combine(ray.color, _DiffuseLight.xyz);
    
            if ((hit.emission.x + hit.emission.y + hit.emission.z) > 0.0f)
            {
                return ray.color + hit.emission;
            }           
            
            lastHitSmoothness = hit.smoothness;
            
            hit = GetNearestIntersection(ray);             
        }
        else
        {
            // Erase the ray's energy - the sky doesn't reflect anything
            //ray.energy = 0.0f;
    
            // Sample the skybox and write it
            float theta = acos(ray.direction.y) / -PI;
            float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
            float3 skyboxColor = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
            
            if (numBounces == 1)
            {
                return skyboxColor * _SkyboxLight.xyz;
            }
            else
            {
                float3 rayPlusSky = ray.color + (skyboxColor * _SkyboxLight.xyz);
                return Combine(rayPlusSky, _AmbientLight.xyz);
            }
        }
    }
}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = (id.xy / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCameraRay(uv);

    // Trace and shade the ray
    float3 result = float3(0, 0, 0);
    
    RayHit hit = GetNearestIntersection(ray);
    result += ray.energy * Shade(ray, hit);

    //if (!any(ray.energy))
        //break;

    Result[id.xy] = float4(result, 1);
}
