// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float4 _AmbientLight;
float4 _SkyboxLight;

int _NumSpheres;
int _NumLights;

static const float PI = 3.141593f;

float3 Combine(float3 a, float3 b)
{
    return float3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z));
}

// =======================================================
// Sphere
struct Sphere
{
    float3 position;
    float3 color;
    float3 emission;
    float radius;
    float smoothness;
};

StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Sphere> _Lights;

// =======================================================
// Ray
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    float3 color;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.color = float3(0.0f, 0.0f, 0.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}
// =======================================================

// =======================================================
// RayHit
struct RayHit
{
    float3 position;
    float3 normal;
    float3 emission;
    float3 color;
    float distance;
    float smoothness;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}
// =======================================================

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    
    if (p2sqr < 0)
        return;
    
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
        bestHit.color = sphere.color;
    }
}


RayHit GetNearestIntersection(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	
	int i;
	for (i = 0; i < _NumSpheres; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}
	
	for (i = 0; i < _NumLights; i++)
	{
		IntersectSphere(ray, bestHit, _Lights[i]);
	}
	
	return bestHit;
}

float3 GetLightHittingPoint(Ray ray, RayHit hit)
{
    float3 combinedLightColor = float3(0.0f, 0.0f, 0.0f);

    int i;
	for (i = 0; i < _NumLights; i++)
	{
		float3 ptToLight = _Lights[i].position - hit.position;
		float distanceToLight = length(ptToLight);
		ptToLight = normalize(ptToLight);
		
		Ray rayToLight = CreateRay(hit.position + (ptToLight * 0.01f), ptToLight);
		RayHit bestHit = CreateRayHit();
		
		bool lightHitsPoint = true;
		int j;
		for (j = 0; j < _NumSpheres; j++)
	    {	       
		    IntersectSphere(rayToLight, bestHit, _Spheres[j]);		    
	    }
	    
	    if (bestHit.distance > distanceToLight)
	    {
	        float3 lightColor = _Lights[i].emission;
	    
	        float rayNormalDot = dot(ptToLight, hit.normal);
	        float lightPercentageThatHits = rayNormalDot;
	        
	        combinedLightColor = Combine(combinedLightColor, lightColor * lightPercentageThatHits);
	    }
	}
	
	return combinedLightColor;
}

float3 GetSkyboxColor(float3 direction)
{
    float theta = acos(direction.y) / -PI;
    float phi = atan2(direction.x, -direction.z) / -PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}

float3 GetColorAtHit(Ray ray, RayHit hit)
{
    // Shaders don't support recursion, so we'll do manual passes for each bounce we want to support
    // This function will be terrible for performance for a GPU, but even so the frameray should be decent.
    
    if (hit.distance >= 1.#INF)
    {
        return GetSkyboxColor(ray.direction) * _SkyboxLight.xyz;
    }
    
    if ((hit.emission.x + hit.emission.y + hit.emission.z) > 0.0f)
    {
        return hit.emission;
    }
    
    ray.color = GetLightHittingPoint(ray, hit);         
    
    
    // Second bounce
    Ray secondRay = CreateRay(hit.position + (hit.normal * 0.001f), reflect(ray.direction, hit.normal));
    RayHit secondHit = GetNearestIntersection(secondRay);       
    
    if (secondHit.distance >= 1.#INF)
    {
        return hit.color * Combine(ray.color, (GetSkyboxColor(secondRay.direction) * _SkyboxLight.xyz));
    }
    
    if ((secondHit.emission.x + secondHit.emission.y + secondHit.emission.z) > 0.0f)
    {
        return hit.color * Combine(ray.color, secondHit.emission);
    }
    
    secondRay.color = GetLightHittingPoint(secondRay, secondHit);
        
        
    // Third bounce        
    Ray thirdRay = CreateRay(secondHit.position + (secondHit.normal * 0.001f), reflect(secondRay.direction, secondHit.normal));
    RayHit thirdHit = GetNearestIntersection(thirdRay);       
    
    if (thirdHit.distance >= 1.#INF)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, (GetSkyboxColor(thirdRay.direction) * _SkyboxLight.xyz));
        return hit.color * Combine(ray.color, secondResult);
    }
    
    if ((thirdHit.emission.x + thirdHit.emission.y + thirdHit.emission.z) > 0.0f)
    {
        float3 secondResult = secondHit.color * Combine(secondRay.color, thirdHit.emission);
        return hit.color * Combine(ray.color, secondResult);
    }
    
    thirdRay.color = GetLightHittingPoint(thirdRay, thirdHit);
       
    return hit.color * Combine(ray.color, secondHit.color * Combine(secondRay.color, thirdHit.color * thirdRay.color));    
}




[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = (id.xy / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCameraRay(uv);

    // Trace and shade the ray
    float3 result = float3(0, 0, 0);
    
    RayHit hit = GetNearestIntersection(ray);
    result += GetColorAtHit(ray, hit);

    Result[id.xy] = float4(result, 1);
}
